import logging
import asyncio
import sys
from datetime import datetime
# Telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext
)
# Google Sheets
import gspread
from oauth2client.service_account import ServiceAccountCredentials
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ loop –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
# –°–∫—Ä—ã—Ç–∏–µ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤ httpx
logging.getLogger("httpx").setLevel(logging.WARNING)
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")  # ‚¨ÖÔ∏è –ë–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
def authorize_google_sheets():
    scope = ['https://spreadsheets.google.com/feeds ', 'https://www.googleapis.com/auth/drive ']
    try:
        if not GOOGLE_CREDENTIALS_JSON:
            logger.error("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None

        creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Google Sheets")
        return client
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
        return None

client = authorize_google_sheets()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID –∏–ª–∏ @username)
ADMINS = [
    "7638667975",         # ID –∞–¥–º–∏–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID)
    "1470547573",
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª—é—á–µ–π –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
FIELD_NAMES = {
    'fio': '–§–ò–û',
    'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
    'age': '–í–æ–∑—Ä–∞—Å—Ç',
    'driver_license': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ',
    'boat_license': '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–∫–æ–π',
    'rent_date': '–î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã',
    'phone_number': '–¢–µ–ª–µ—Ñ–æ–Ω'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
FIO, BIRTH_DATE, DRIVER_LICENSE, BOAT_LICENSE, BOAT_TRAINING, RENT_DATE, PHONE_NUMBER, CONFIRM = range(8)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞—è–≤–∫–∏
retry_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start_booking')]
])

# –ö–Ω–æ–ø–∫–∏ –æ–±—É—á–µ–Ω–∏—è
training_buttons = ReplyKeyboardMarkup(
    [['‚úÖ –ü—Ä–æ—à—ë–ª', '‚è≥ –ï—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª']],
    one_time_keyboard=True,
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–ª–∏—á–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ª–æ–º–µ—Ä–Ω—ã–º —Å—É–¥–Ω–æ–º
boat_license_buttons = ReplyKeyboardMarkup(
    [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']],
    one_time_keyboard=True,
    resize_keyboard=True
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
async def welcome(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data='start_booking')],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É–¥–Ω–æ–º", url='https://64.mchs.gov.ru/uploads/resource/2021-07-01/normativno-pravovye-akty_1625137914639753523.pdf ')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚öìÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BoatSharing!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–∞–ª–æ–º–µ—Ä–Ω–æ–µ —Å—É–¥–Ω–æ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ‚Äî 21 –≥–æ–¥\n"
        "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def start_booking(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    return FIO

# –§–ò–û
async def fio(update: Update, context: CallbackContext) -> int:
    context.user_data['fio'] = update.message.text
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:\n–ü—Ä–∏–º–µ—Ä: 01.01.1990, 35")
    return BIRTH_DATE

# –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç
async def birth_date(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text.strip()
    parts = user_input.split(',')
    if len(parts) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤–æ–∑—Ä–∞—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return BIRTH_DATE
    birth_date_str = parts[0].strip()
    age_str = parts[1].strip()
    try:
        age = int(age_str)
        if age < 21:
            await update.message.reply_text("‚ùå –í—ã —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Å—É–¥–Ω–∞. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 21 –≥–æ–¥–∞.", reply_markup=retry_keyboard)
            return ConversationHandler.END
        context.user_data['birth_date'] = birth_date_str
        context.user_data['age'] = age
        keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("ü™™ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ?", reply_markup=reply_markup)
        return DRIVER_LICENSE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return BIRTH_DATE

# –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞
async def driver_license(update: Update, context: CallbackContext) -> int:
    answer = update.message.text.lower()
    context.user_data['driver_license'] = '–î–ê' if '–¥–∞' in answer else '–ù–ï–¢'
    if context.user_data['driver_license'] == '–ù–ï–¢':
        await update.message.reply_text("‚ùå –ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=retry_keyboard)
        return ConversationHandler.END
    await update.message.reply_text(
        "üõ• –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ª–æ–º–µ—Ä–Ω—ã–º —Å—É–¥–Ω–æ–º?",
        reply_markup=boat_license_buttons
    )
    return BOAT_LICENSE

# –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ª–æ–º–µ—Ä–Ω—ã–º —Å—É–¥–Ω–æ–º
async def boat_license(update: Update, context: CallbackContext) -> int:
    answer = update.message.text.lower()
    context.user_data['boat_license'] = '–î–ê' if '–¥–∞' in answer else '–ù–ï–¢'
    training_link = "https://64.mchs.gov.ru/uploads/resource/2021-07-01/normativno-pravovye-akty_1625137914639753523.pdf "
    if context.user_data['boat_license'] == '–ù–ï–¢':
        await update.message.reply_text(
            f"üõ• –î–ª—è –∞—Ä–µ–Ω–¥—ã —Å—É–¥–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ:\n{training_link}",
            reply_markup=training_buttons
        )
        return BOAT_TRAINING
    else:
        await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã:")
        return RENT_DATE

# –û–±—É—á–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞–ª–æ–º–µ—Ä–Ω—ã–º —Å—É–¥–Ω–æ–º
async def boat_training(update: Update, context: CallbackContext) -> int:
    answer = update.message.text.strip()
    if answer == '‚úÖ –ü—Ä–æ—à—ë–ª':
        context.user_data['boat_license'] = '–ü—Ä–æ—à—ë–ª –æ–±—É—á–µ–Ω–∏–µ'
        await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã:")
        return RENT_DATE
    elif answer == '‚è≥ –ï—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª':
        training_link = "https://64.mchs.gov.ru/uploads/resource/2021-07-01/normativno-pravovye-akty_1625137914639753523.pdf "
        await update.message.reply_text(
            f"üõ• –û–±—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü—Ä–æ–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{training_link}",
            reply_markup=training_buttons
        )
        return BOAT_TRAINING
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.", reply_markup=training_buttons)
        return BOAT_TRAINING

# –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã
async def rent_date(update: Update, context: CallbackContext) -> int:
    context.user_data['rent_date'] = update.message.text
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
    return PHONE_NUMBER

# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone_number(update: Update, context: CallbackContext) -> int:
    context.user_data['phone_number'] = update.message.text
    summary = (
        "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ <b>–§–ò–û:</b> {context.user_data['fio']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {context.user_data['birth_date']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone_number']}\n"
        f"ü™™ <b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞:</b> {context.user_data['driver_license']}\n"
        f"üõ• <b>–ü—Ä–∞–≤–∞ –Ω–∞ –ª–æ–¥–∫—É:</b> {context.user_data.get('boat_license', '-')}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã:</b> {context.user_data['rent_date']}\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup, parse_mode='HTML')
    return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
async def confirm(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    logger.info("üü¢ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    if query.data == 'confirm':
        user = query.from_user
        user_data = context.user_data
        if not client:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=retry_keyboard)
            return ConversationHandler.END
        try:
            sheet = client.open(GOOGLE_SHEET_NAME).sheet1
            row = [
                datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                user_data['fio'],
                user_data['birth_date'],
                user_data['age'],
                user_data['driver_license'],
                user_data.get('boat_license', '-'),
                user_data['rent_date'],
                user_data['phone_number'],
                f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
            ]
            sheet.append_row(row)
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {row}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            summary_text = "üîî –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
            for key, value in user_data.items():
                display_name = FIELD_NAMES.get(key, key)
                summary_text += f"{display_name}: {value}\n"

            # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin in ADMINS:
                try:
                    await context.bot.send_message(chat_id=admin, text=summary_text)
                    logger.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

            await query.edit_message_text(
                "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: —Å 9:00 –¥–æ 19:00\n\n"
                "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É–¥–Ω–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
                "https://64.mchs.gov.ru/uploads/resource/2021-07-01/normativno-pravovye-akty_1625137914639753523.pdf ",
                parse_mode='HTML',
                reply_markup=retry_keyboard
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=retry_keyboard)
    else:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=retry_keyboard)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=retry_keyboard)
    return ConversationHandler.END

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def unknown(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=retry_keyboard
    )

# –î–∏–∞–ª–æ–≥
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_booking, pattern='^start_booking$')],
    states={
        FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fio)],
        BIRTH_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birth_date)],
        DRIVER_LICENSE: [MessageHandler(filters.Regex('^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$'), driver_license)],
        BOAT_LICENSE: [MessageHandler(filters.Regex('^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$'), boat_license)],
        BOAT_TRAINING: [MessageHandler(filters.Regex('^(‚úÖ –ü—Ä–æ—à—ë–ª|‚è≥ –ï—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª)$'), boat_training)],
        RENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_date)],
        PHONE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_number)],
        CONFIRM: [CallbackQueryHandler(confirm, pattern='^(confirm|cancel)$')]
    },
    fallbacks=[
        MessageHandler(filters.TEXT & ~filters.COMMAND, welcome),
        MessageHandler(filters.COMMAND, welcome),
        CallbackQueryHandler(start_booking, pattern='^start_booking$')
    ],
    per_message=False
)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TOKEN:
        logger.error("‚ùå TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & filters.COMMAND, welcome))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, welcome))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
